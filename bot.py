import config
import keyboard as kb

import requests
import asyncio
import logging
import time
import pytz

from io import StringIO
from datetime import datetime, timedelta
from multiprocessing import Process

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

from sqlighter import SQlighter

logging.basicConfig(level=logging.INFO)

# –æ–±—ä—è–≤–ª—è–µ–º –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
# –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–º—è—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
# –æ–±—ä—è–≤–ª—è–µ–º –¥–∏—Å–ø–∞—Ç—á–µ—Ä
dp = Dispatcher(bot, storage=storage)
# –æ–±—ä—è–≤–ª—è–º —Ü–∏–∫–ª
loop = asyncio.get_event_loop()
# —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–¥ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å
db = SQlighter('db.db')

class MyStates(StatesGroup):
    log_state = State() # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    date_state = State() # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    time_state = State() # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏

# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def welcome_mess(message: types.Message):
    answ = "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ä–æ—à–∏–π –±–æ—Ç!\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å –≤–∞–º –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ì—Ä–ì–£!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.\n"
    await bot.send_message(
        message.from_user.id,
        answ,
        reply_markup=kb.markup_unreg
    )

# –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['help'])
async def help_mess(message: types.Message):
    if db.subscriber_exists(message.from_user.id):
        answ = "‚Ä¢ /reg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω)\n‚Ä¢ /subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n‚Ä¢ /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n‚Ä¢ /getschedule - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–µ\n‚Ä¢ /changetime - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏\n‚Ä¢ /info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ª–æ–≥–∏–Ω, —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏)\n‚Ä¢ /help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        await bot.send_message(
            message.from_user.id, 
            answ, 
            reply_markup=kb.markup
        )
    else:
        answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup_unreg
        )

# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞ —Ä–∞—Å—Å—Å—ã–ª–∫—É
@dp.message_handler(commands=['subscribe'])
async def sub_msg(message: types.Message):
    if db.subscriber_exists(message.from_user.id):
        db.update_status(message.from_user.id, True)      
        answ = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!"
        await bot.send_message(
            message.from_user.id, 
            answ,
            reply_markup=kb.markup
        )
    else:
        answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup_unreg
        )

# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º
@dp.message_handler(commands=['unsubscribe'])
async def unsub_msg(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        answ = "–î–ª—è —á–µ–≥–æ –≤—ã –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å?\n–í—ã –≤–µ–¥—å –¥–∞–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n(/reg)"
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup_unreg
        )
    else:
        db.update_status(message.from_user.id, False)
        answ = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup
        )

# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    if db.subscriber_exists(message.from_user.id):
        sub = db.get_sub(message.from_user.id)
        sub_login = sub[0][2]
        sub_time = sub[0][3]
        if sub[0][4]:
            sub_status = "–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞‚úÖ"
        else:
            sub_status = "–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞‚ùå"
        answ = f"‚Ä¢ –í–∞—à –ª–æ–≥–∏–Ω: {sub_login}‚òë\n‚Ä¢ –í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {sub_status}\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∞ –Ω–∞ {sub_time}üïë"
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup
        )
    else:
        answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup_unreg
        )

# –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(commands=['reg'])
async def reg_msg(message: types.Message):
    await MyStates.log_state.set()

    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")      

# —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–∏–Ω–∞, –±—É–¥–µ—Ç —Ç—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ; —Ç–∞–∫ –∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥
@dp.message_handler(state=MyStates.log_state)
async def set_log(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        usr_login = data['text']
        
        if bool(check_login(usr_login)):
            if not db.subscriber_exists(message.from_user.id):
                db.add_subscriber(message.from_user.id)
            db.set_login(message.from_user.id, usr_login)
            answ_for_client = "–£—Å–ø–µ—à–Ω–æ!"
            await bot.send_message(
                message.from_user.id,
                answ_for_client,
                reply_markup=kb.markup
            )

        else:
            answ_for_client = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω!"   
            await bot.send_message(
                message.from_user.id,
                answ_for_client,
                reply_markup=kb.markup_unreg
            )
 
    await state.finish()

# –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã
@dp.message_handler(commands=['getschedule'])
async def get_date(message: types.Message):
    await MyStates.date_state.set()

    if db.subscriber_exists(message.from_user.id):
        answ = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É\n(–î–î.–ú–ú.–ì–ì–ì–ì)"
        await bot.send_message(
            message.from_user.id,
            answ
        )
    else:
        answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup_unreg
        )

# —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –Ω–µ–π
@dp.message_handler(state=MyStates.date_state)
async def set_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        usr_date = data['text']

        sub = db.get_sub(message.from_user.id)

        login = sub[0][2]
        ID = get_studentID(login)
        schedule = get_schedule(ID, usr_date)

        if isinstance(schedule, str) and bool(schedule):
            answ = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {usr_date}:\n{schedule}"
        if isinstance(schedule, int):
            answ = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."
        if schedule == 0:
            answ = "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"
    
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup
        )

    await state.finish()

# –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(commands=['changetime'])
async def get_time(message: types.Message):
    await MyStates.time_state.set()

    if db.subscriber_exists(message.from_user.id):
        answ = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n(–Ω–∞–ø—Ä. 07.47)"
        await bot.send_message(
            message.from_user.id,
            answ
        )
    else:
        answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup_unreg
        )

# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(state=MyStates.time_state)
async def set_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        usr_time = data['text']

        try:
            time.strptime(usr_time, '%H.%M')
            if len(usr_time) == 5:
                db.set_time(message.from_user.id, usr_time)
                answ = "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ"
            else:
                answ = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!"
        except Exception:
            answ = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!"

        await bot.send_message(
            message.from_user.id,
            answ,
            reply_markup=kb.markup
        )

    await state.finish()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=['text'])
async def msg_asnw(message: types.Message):
    if message.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        await MyStates.log_state.set()

        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")
    
    elif message.text.lower() == "—Å–º–µ–Ω–∞ –ª–æ–≥–∏–Ω–∞":
        await MyStates.log_state.set()

        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")

    elif message.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏":
        await MyStates.time_state.set()

        if db.subscriber_exists(message.from_user.id):
            answ = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n(–Ω–∞–ø—Ä. 07.47)"
            await bot.send_message(
                message.from_user.id,
                answ
            )
        else:
            answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup_unreg
            )

    elif message.text.lower() == "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É":
        if db.subscriber_exists(message.from_user.id):
            db.update_status(message.from_user.id, True)      
            answ = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup
            )
        else:
            answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup_unreg
            )
   
    elif message.text.lower() == "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏":
        if not db.subscriber_exists(message.from_user.id):
            answ = "–î–ª—è —á–µ–≥–æ –≤—ã –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å?\n–í—ã –≤–µ–¥—å –¥–∞–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n(/reg)"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup_unreg
            )
        else:
            db.update_status(message.from_user.id, False)
            answ = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup
            ) 

    elif message.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await MyStates.date_state.set()

        if db.subscriber_exists(message.from_user.id):
            answ = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É\n(–î–î.–ú–ú.–ì–ì–ì–ì)"
            await bot.send_message(
                message.from_user.id,
                answ
            )
        else:
            answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup_unreg
            )
  
    elif message.text.lower() == "–ø–æ–º–æ—â—å":
        if db.subscriber_exists(message.from_user.id):
            answ = "‚Ä¢ /reg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω)\n‚Ä¢ /subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n‚Ä¢ /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n‚Ä¢ /getschedule - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–µ\n‚Ä¢ /changetime - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏\n‚Ä¢ /info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ª–æ–≥–∏–Ω, —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏)\n‚Ä¢ /help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup
            )
        else:
            answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup_unreg
            )
    
    elif message.text.lower() == "–∏–Ω—Ñ–æ":
        if db.subscriber_exists(message.from_user.id):
            sub = db.get_sub(message.from_user.id)
            sub_login = sub[0][2]
            sub_time = sub[0][3]
            if sub[0][4]:
                sub_status = "–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞‚úÖ"
            else:
                sub_status = "–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞‚ùå"
            answ = f"‚Ä¢ –í–∞—à –ª–æ–≥–∏–Ω: {sub_login}‚òë\n‚Ä¢ –í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {sub_status}\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∞ –Ω–∞ {sub_time}üïë"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup
            )
        else:
            answ = "–°–ø–µ—Ä–≤–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n(/reg)"
            await bot.send_message(
                message.from_user.id,
                answ,
                reply_markup=kb.markup_unreg
            )
    
    else:
        await bot.send_message(
            message.from_user.id,
            "–ù–µ –º–æ–≥—É –≤–∞—Å –ø–æ–Ω—è—Ç—å\n–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ /help",
            reply_markup=kb.markup_help
        )

# –ø–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
def get_studentID(login):
    try:
        r = requests.get(
            f"http://api.grsu.by/1.x/app2/getStudent?login={login}"
        )
        data = r.json()
        return data["id"]
    except Exception:
        pass

# –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
def get_schedule(ID, date):                 
    try:
        r = requests.get(
            f"http://api.grsu.by/1.x/app2/getGroupSchedule?studentId={ID}&dateStart={date}&dateEnd={date}"
        )
        data = r.json()

        try:
            if data["error"]["code"] == "24004" or data["error"]["code"] == "24005":
                error = int(data["error"]["code"])
                return error
        except Exception:
            pass

        try:
            if data["count"] == 0:
                return 0
        except Exception:
            pass

        count_of_lessons = data["days"][0]["count"]
        res = StringIO()
        for i in range(count_of_lessons):
            title = data["days"][0]["lessons"][i]["title"]
            typeOfLesn = data["days"][0]["lessons"][i]["type"]
            timeStart = data["days"][0]["lessons"][i]["timeStart"]
            teacher = data["days"][0]["lessons"][i]["teacher"]["fullname"]
            room = data["days"][0]["lessons"][i]["room"]
            address = data["days"][0]["lessons"][i]["address"]
            schedule = f"\n{timeStart}: {title} ({typeOfLesn});\n{teacher};\n{address}, {room}\n"
            res.write(schedule)
        return res.getvalue()
    except Exception as ex:
        print(ex)
        
# –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏ –ª–æ–≥–∏–Ω –±—ã–ª –≤–≤–µ–¥–µ–Ω
def check_login(login):
    if get_studentID(login) > 0:
        return True
    else:
        return False

# –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
async def msging(wait_for):
    while True:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(wait_for)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        tz = pytz.timezone('Europe/Minsk')
        now = datetime.now(tz)
        current_time = now.strftime("%H.%M")
        current_date = now.strftime("%d.%m.%Y")
        tomorrow_date = (now + timedelta(days=1)).strftime("%d.%m.%Y")
        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        subs = db.get_subs()
        # –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—Ä–µ–º—è, –∏, –≤ —Å–ª—É—á–∞–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        for sub in subs:
            usr_time = sub[3]
            split_time = "15.00"
            if usr_time < split_time and current_time == usr_time:
                login = sub[2]
                ID = get_studentID(login)
                schedule = get_schedule(ID, current_date)
                if isinstance(schedule, str) and bool(schedule):
                    await bot.send_message(sub[1], f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{schedule}")
            elif usr_time >= split_time and current_time == usr_time:
                login = sub[2]
                ID = get_studentID(login)
                schedule = get_schedule(ID, tomorrow_date)
                if isinstance(schedule, str) and bool(schedule):
                    await bot.send_message(sub[1], f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{schedule}")

# —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
def loop_msg():
    loop.run_until_complete(msging(60))

if __name__ == '__main__':
    # –æ–±—ä—è–≤–ª—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    t = Process(target=loop_msg)
    t.start()
    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)